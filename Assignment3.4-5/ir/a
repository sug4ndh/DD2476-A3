final double ALPHA = 1.0;
		final double BETA = 0.75;

		// weights (without idf) for each term in the original query
		for (String term : terms) {
			int dft = indexer.index.getPostings(term).size();
			weights.put(term, ALPHA / terms.size());
		}

		int numRelevant = 0;
		for (boolean b : docIsRelevant) if (b) numRelevant++;

		// normalised weights (without idf) for each term in each relevant document
		Iterator<PostingsEntry> peIt = results.iterator();
		for (boolean isRelevant : docIsRelevant) {
			PostingsEntry pe = peIt.next();
			
			// only use the relevant documents (GAMMA = 0)
			if (isRelevant) {
				Map<String, Integer> documentTerms = indexer.getTermsInDoc(pe.docID);
				int docLength = indexer.index.docLengths.get("" + pe.docID);
				
				for (Map.Entry<String, Integer> termEntry : documentTerms.entrySet()) {
					String term = termEntry.getKey();
					if (!weights.containsKey(term)) {
						weights.put(term, 0.0);
						terms.add(term);
					}
					int tf = termEntry.getValue();
					double oldW = weights.get(term);
					weights.put(term, oldW + (BETA / numRelevant) * (((double) tf) / docLength));
				}
			}
		}
	}
}






int numRelevant = 0;
		for (int rank = 0; rank < docIsRelevant.length; rank++) {
			if (docIsRelevant[rank])
				numRelevant++;
		}
		
		for (int word = 0; word < weights.size(); word++) {
			weights.set(word, weights.get(word)/weights.size());
		}
		
		// Change the numerator to change Beta, the relevant doc word weights
		double docWordsWeight = 1 / numRelevant;

		int[] docIds = new int[docIsRelevant.length];
		Iterator<PostingsEntry> topEntries = results.getScoreSortedIterator();
		Set<String> encounteredThisIteration = new HashSet<String>();
		for (int entry = 0; entry < docIds.length && topEntries.hasNext(); entry++) {
			int docId = topEntries.next().docID;
			docIds[entry] = docId;
			Set<String> wordSet = (((HashedIndex)indexer.index).getWordsInDoc(docId));
			double docWordsWeightInDocument = docWordsWeight / ((HashedIndex)indexer.index).docLengths.get(docId);
			for (String word: wordSet) {
				if (!terms.contains(word)) {
					terms.add(word);
					weights.add(docWordsWeightInDocument);
				} else {
					int indexOfWord = terms.indexOf(word);
					weights.set(indexOfWord, weights.get(indexOfWord) + docWordsWeightInDocument);
				}
			}
		}
		
		
	}
